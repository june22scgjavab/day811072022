

You have been given a Paper and Pen. In the Paper you have to write a paragraph. 

public class Paper {
private int size;
private String paragraph;




}


public class Pen   {
private String color;
private int price;
private String type;
private String brand;
// setters/getters

public void write(){}
public void draw(){}

}
---------------------------------------------------------------------------------------------------
The points related to static are:-
* the member a class can be declared as static which includes variables/objects/method.
* class cannot be declared as static until unless the class is an inner class.

  public static class Hello {}  // This declaration is incorrect.

  public class Hello {
   public static class Hi{}     // This declaration is fine.
  }
* static member can access only the static members. If we want to access a non static member from a static
  block we should create an object of the class in which we have the non-static member.
 But we can access static members from a non-static context. 
* to initialise the static members we use static block.
* static block is called once when the object gets created or without object creation we tried accessing
  some static member of a class.
* static variables cannot be a local varables. 
-----------------------------------------------------------------------------------------------

public Student(static int counter){  // static as a local variable not possible

}

public display(){
static int num=0;    // wrong as static cannot be local

}

public class Demo
{
static int i;

public void display(){
System.out.println(i); //is possible

}

}


----------------------------------------------------------------------------------------------------------


class Customer2 {
	private static int counter; // Declaring the static variable counter
	private String customerId;
	private String customerName;
	private long contactNumber;
	private String address;
	private static float deliveryCharge;
	static {
		deliveryCharge = 1.5f;
		counter = 100; // Initializing the static variable counter
	}
	public Customer2(String customerName, long contactNumber, String address) {
		// Incrementing the counter and initializing customerId
		this.customerId = "C" + ++Customer.counter;
		this.customerName = customerName;
		this.contactNumber = contactNumber;
		this.address = address;
	}
	// Static method to get the value of static variable counter
	public static int getCounter() {
		return counter;
	}
	// Static method to change the value of static variable counter if needed
	public static void setCounter(int counter) {
		Customer2.counter = counter;
	}
	public String getCustomerId() {
		return customerId;
	}
	public void setCustomerId(String customerId) {
		this.customerId = customerId;
	}
	public String getCustomerName() {
		return customerName;
	}
	public void setCustomerName(String customerName) {
		this.customerName = customerName;
	}
	public long getContactNumber() {
		return contactNumber;
	}
	public void setContactNumber(long contactNumber) {
		this.contactNumber = contactNumber;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public static float getDeliveryCharge() {
		return deliveryCharge;
	}
	public static void setDeliveryCharge(float deliveryCharge) {
		Customer2.deliveryCharge = deliveryCharge;
	}
	public void displayCustomerDetails() {
		System.out.println("Displaying customer details");
		System.out.println("Customer Id: " + this.customerId);
		System.out.println("Customer Name: " + this.customerName);
		System.out.println("Contact Number: " + this.contactNumber);
		System.out.println("Address: " + this.address);
		System.out.println("Delivery Charge: " + Customer2.deliveryCharge);
		System.out.println();
	}
	public double payBill(double totalPrice) {
		double discountPercentage = 5;
		System.out.println("Calculating final amount to be paid.....");
		double priceAfterDiscount = totalPrice * (1 - (discountPercentage / 100));
		double finalBillAmount = priceAfterDiscount + Customer2.deliveryCharge;
		return finalBillAmount;
	}
}
public class Tester2 {
	public static void main(String[] args) {
		Customer2 customer1 = new Customer2("Sam", 9945000009L, "Carolina Street, Springfield, 62702");
		Customer2 customer2 = new Customer2("John", 9645000009L, "Carolina Street, Springfield, 62708");
		Customer2 customer3 = new Customer2("Alex", 9745000009L, "Carolina Street, Springfield, 62768");
		System.out.println("Customer Id for the first customer is: " + customer1.getCustomerId());
		System.out.println("Customer Id for the second customer is: " + customer2.getCustomerId());
		System.out.println("Customer Id for the third customer is: " + customer3.getCustomerId());
	}
}
-----------------------------------------------------------------------------------------
* static is related to class and so it should be access with class but it can be accessed with object class.

class Demo{
   private int static number;
 
   static{
       number=10;
   }
 
  }


Demo demo1=new Demo();  
// Whenever an object is getting created it loads the class
// and while loading the class static members are coming to existence.

 

class Demo{
   private int static number;
   private int number2;
   static{
       number=10;
       number2=20; // not possible
   }
 
  }


// Because static block is on action before the object is getting created and
// the instance variables like number2 comes into existence when the object is getting created.


class Demo{
   private int static number;
   private int number2;
   static{
       number=10;
       number2=20; // not possible
   }
   public static void main(String[] args){
    System.out.println(number); // here both main and number is static
    System.out.println(number2); // number2 is not coming to existence because we dont have any object created.
    Demo demo=new Demo();   // number2 is coming to existence
    System.out.println(demo.number2); // This is possible
   }
 
  }


class Demo {
   private int static number;
   private int number2;

   public static void method1(){
      System.out.println(number); //yes because it is static
      System.out.println(number2); //no
      Demo demo=new Demo();
      demo.number2=100;
   }
 
   public void method2() {
    System.out.println(number); // we are able to access
   //static member within the non static method because non static methods are into works/existence
   // after the object is created but static already came into existence before method2 during class
   // loading so that is the reason the non static will be able to access the static member.
    System.out.println(number2) // will works 
  }
 --------------------------------------------------------------------------------------------------------------



class Demo {
   private int static number;
   private int number2;

 
   public void method2() {
    static int j=20; // static cannot be within a method . A member can be a static not a local variable
  }
}



class Demo {
   private int static number;
   private int number2;

 
   public void method2(static int j) { // static parameter is a local variable so not possible
     number=20; // static cannot be within a method . A member can be a static not a local variable
  }
}



class Demo {
   private int static number;
   private int number2;

 
   public void method2(int j) {  // possible
     number=20;  
  }
}

======================================================================================================
Q Why main method is static?

main method is the entry point of the code.

public class Demo {
   public void main(String args[])
   {

   }
 }


  Demo demo=new Demo();
  demo.main();
Where we are going to put these two lines?


public class Demo {
   public  static void main(String args[])
   {

   }
 }

Demo.main() ===> The call of the main method goes as this.
-----------------------------------------------------------------------------------------------------
